# -*- coding: utf-8 -*-
"""ALGO12.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16B2RMZV_c6lxpTDMKF3OR6vrLXtcCcUm
"""

print('@@@@      @     @@@@ @     @')
print('@  @     @ @    @    @     ')
print('@ @     @   @   @@@@ @     @  ')
print('@  @   @ @@@ @  @    @     @   ')
print('@   @ @       @ @    @@@@@ @      ')
def linear_search(arr, target):
    found = False
    index = -1
    for i in range(len(arr)):
        if arr[i] == target:
            found = True
            index = i
            break
    return found, index

# Input dari pengguna
list_length = int(input("Masukkan panjang list: "))
arr = []
for i in range(list_length):
    num = int(input(f"Masukkan angka ke-{i + 1}: "))
    arr.append(num)

target = int(input("Masukkan angka yang ingin dicari: "))

found, index = linear_search(arr, target)

if found:
    print(f"Angka {target} ditemukan di indeks ke-{index}")
else:
    print(f"Angka {target} tidak ditemukan dalam list")

print('@@@@      @     @@@@ @     @')
print('@  @     @ @    @    @     ')
print('@ @     @   @   @@@@ @     @  ')
print('@  @   @ @@@ @  @    @     @   ')
print('@   @ @       @ @    @@@@@ @      ')
def binary_search(arr, target):
    left = 0
    right = len(arr) - 1
    found = False
    index = -1

    while left <= right:
        mid = (left + right) // 2
        if arr[mid] == target:
            found = True
            index = mid
            break
        elif arr[mid] < target:
            left = mid + 1
        else:
            right = mid - 1

    return found, index

# Input dari pengguna
list_length = int(input("Masukkan panjang list (harus dalam keadaan terurut/ascending): "))
arr = []
for i in range(list_length):
    num = int(input(f"Masukkan angka ke-{i + 1}: "))
    arr.append(num)

target = int(input("Masukkan angka yang ingin dicari: "))

found, index = binary_search(arr, target)

if found:
    print(f"Angka {target} ditemukan di indeks ke-{index}")
else:
    print(f"Angka {target} tidak ditemukan dalam list")

print('@@@@      @     @@@@ @     @')
print('@  @     @ @    @    @     ')
print('@ @     @   @   @@@@ @     @  ')
print('@  @   @ @@@ @  @    @     @   ')
print('@   @ @       @ @    @@@@@ @      ')
def bubble_sort(arr):
    n = len(arr)

    for i in range(n):
        # Perulangan untuk membandingkan elemen
        for j in range(0, n - i - 1):
            if arr[j] > arr[j + 1]:
                # Menukar elemen jika urutan salah
                arr[j], arr[j + 1] = arr[j + 1], arr[j]

    return arr

# Input dari pengguna
list_length = int(input("Masukkan panjang list: "))
arr = []
for i in range(list_length):
    num = int(input(f"Masukkan angka ke-{i + 1}: "))
    arr.append(num)

print("List sebelum diurutkan:", arr)

sorted_arr = bubble_sort(arr.copy())  # Menggunakan salinan list agar list asli tetap utuh

print("List setelah diurutkan (Bubble Sort):", sorted_arr)

print('@@@@      @     @@@@ @     @')
print('@  @     @ @    @    @     ')
print('@ @     @   @   @@@@ @     @  ')
print('@  @   @ @@@ @  @    @     @   ')
print('@   @ @       @ @    @@@@@ @      ')
def selection_sort(arr):
    n = len(arr)

    for i in range(n):
        min_idx = i
        # Mencari nilai terkecil di sisa list yang belum diurutkan
        for j in range(i + 1, n):
            if arr[j] < arr[min_idx]:
                min_idx = j

        # Menukar elemen terkecil dengan elemen pertama di sisa list yang belum diurutkan
        arr[i], arr[min_idx] = arr[min_idx], arr[i]

    return arr

# Input dari pengguna
list_length = int(input("Masukkan panjang list: "))
arr = []
for i in range(list_length):
    num = int(input(f"Masukkan angka ke-{i + 1}: "))
    arr.append(num)

print("List sebelum diurutkan:", arr)

sorted_arr = selection_sort(arr.copy())  # Menggunakan salinan list agar list asli tetap utuh

print("List setelah diurutkan (Selection Sort):", sorted_arr)